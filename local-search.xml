<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>OC与Swift混编</title>
    <link href="/2020/03/18/OC%E4%B8%8ESwift%E6%B7%B7%E7%BC%96/"/>
    <url>/2020/03/18/OC%E4%B8%8ESwift%E6%B7%B7%E7%BC%96/</url>
    
    <content type="html"><![CDATA[<h1 id="工程配置"><a href="#工程配置" class="headerlink" title="工程配置"></a>工程配置</h1><h2 id="桥接文件"><a href="#桥接文件" class="headerlink" title="桥接文件"></a>桥接文件</h2><p>当我们在Swift项目（OC项目）中首次添加OC文件（Swift文件）时，Xcode会自动弹出桥接文件创建的提示，如图</p><p>![image-20200318201208687](/Users/chenhao06/Library/Application Support/typora-user-images/image-20200318201208687.png)</p><p>这里我们可以选择Xcode自动创建或者手动创建，创建完成后系统会自动生成2个桥接文件，如图</p><p>![image-20200318203257976](/Users/chenhao06/Library/Application Support/typora-user-images/image-20200318203257976.png)</p><p>$(SWIFT_MODULE_NAME)-Bridging-Header.h，这个头文件直接在目录中，如图</p><p>![image-20200318203048767](/Users/chenhao06/Library/Application Support/typora-user-images/image-20200318203048767.png)</p><p>$(SWIFT_MODULE_NAME)-Swift.h在目录中不可见。</p><p>如果我们需要手动创建的也是可以的，只要保证文件名与Build Setting中path一直即可，不过推荐使用系统默认的创建。</p><h2 id="头文件导入"><a href="#头文件导入" class="headerlink" title="头文件导入"></a>头文件导入</h2><p>一般混编项目中常用的头文件有-Bridging-Header.h，-Swift.h，-pch等，在OC与swift混编时，如果Swift需要引用OC的类，那么需要再-Bridging-Header.h中引入OC头文件，如图</p><p>![屏幕快照 2020-03-18 下午8.54.19](/Users/chenhao06/Desktop/屏幕快照 2020-03-18 下午8.54.19.png)</p><p>如果OC类需要引用Swift类时，需要在OC类中import $(SWIFT_MODULE_NAME)-Swift.h</p><p>![屏幕快照 2020-03-18 下午8.55.55](/Users/chenhao06/Desktop/屏幕快照 2020-03-18 下午8.55.55.png)</p><p>导入后OC类即可使用项目中所有继承于NSObject的Swift类，这里需要注意的时，未继承NSObject的Swift类无法被OC调用。</p><p>这里点进$(SWIFT_MODULE_NAME)-Swift.h看一看，除了顶部一大堆宏定义宏方法外，Xcode还帮我们把所有继承自NSObject的Swift类编译成OC的Interface，所以OC才能正常调用Swift类的属性和方法</p><p>![屏幕快照 2020-03-18 下午8.59.10](/Users/chenhao06/Desktop/屏幕快照 2020-03-18 下午8.59.10.png)</p><h1 id="cocoaPod"><a href="#cocoaPod" class="headerlink" title="cocoaPod"></a>cocoaPod</h1><h2 id="静态库与动态库"><a href="#静态库与动态库" class="headerlink" title="静态库与动态库"></a>静态库与动态库</h2><h2 id="OC库与swift库的导入"><a href="#OC库与swift库的导入" class="headerlink" title="OC库与swift库的导入"></a>OC库与swift库的导入</h2><h2 id="framework-or-staticLibrary"><a href="#framework-or-staticLibrary" class="headerlink" title="framework or staticLibrary"></a>framework or staticLibrary</h2><h1 id="语法混编"><a href="#语法混编" class="headerlink" title="语法混编"></a>语法混编</h1><h2 id="OC调用Swift"><a href="#OC调用Swift" class="headerlink" title="OC调用Swift"></a>OC调用Swift</h2><p>简单说下OC调用Swift需要注意的点：</p><p>1.import $(SWIFT_MODULE_NAME)-Swift.h</p><p><code>#import &quot;OCAndSwift-Swift.h&quot;</code></p><p>2.调用Swift类时，Swift类必须继承自NSObject</p><p><code>class SwiftClass: NSObject {</code></p><p><code>var claseName = &quot;SwiftClass&quot;</code></p><p><code>}</code></p><p>3.调用Swift类的方法，属性时，Swift类的方法属性都必须加上@objc关键字</p><p><code>@objc var retrainConfirmBlock: (() -&gt; Void)?</code></p><p><code>@objc convenience init()</code></p><p>4.如果使用KVC，KVO等监听，需要对监听的属性加上dynamic关键字，因为Swift并不是动态派发的语言，dynamic关键字会让编译器进行动态分发而不是静态分发</p><p><code>@objc dynamic var orderNumber: NSNumber?</code></p><h2 id="Swift调用OC"><a href="#Swift调用OC" class="headerlink" title="Swift调用OC"></a>Swift调用OC</h2><p>Swift调用OC需要注意的点：</p><p>1.$(SWIFT_MODULE_NAME)-Bridging-Header.h引入OC类头文件</p><p>2.OC类的相关属性及方法在Swift类中都可以直接调用，只需要注意Swift语法即可</p><p><code>UIView.animate(withDuration: TimeInterval(time), delay: 0, options: UIView.AnimationOptions.curveLinear, animations: {</code></p><p><code>// animate</code></p><p><code>}) {(finish) in</code></p><p><code>//finish</code></p><p><code>}</code></p><p>3.OC类的多数基本类型如NSArray，NSDictionay，NSError等对象(Object) 都可以通过 as? 和Swift中的基础类型(Struct) Array，Dictionary，Error等值类型互换。</p><p><code>let contentAry = info[&quot;content&quot;] as? [String]</code></p><p><code>titleLabel.text = title as? String ?? &quot;&quot;</code></p><p><code>if let failedWith = error as? Error {</code></p><p>}</p><p>4.OC宏的使用，Swift使用OC的宏，只能直接使用非常简单的值类型宏，对于复杂的宏方法则需要自己重写一个全局方法替代，全局静态变量可以直接使用</p><p><code>#define kExpireTime 60  //√</code></p><p><code>#define DDSharedAppDelegate ((AppDelegate *)([UIApplication sharedApplication].delegate)) //X</code></p><h2 id="Swift特性"><a href="#Swift特性" class="headerlink" title="Swift特性"></a>Swift特性</h2><h3 id="Optional"><a href="#Optional" class="headerlink" title="Optional"></a>Optional</h3><p>1.简单介绍一下Optional-可选类型，Optional实际上是一个枚举类型：</p><p><code>public enum Optional&lt;Wrapped&gt; : ExpressibleByNilLiteral {</code></p><p><code>case none</code></p><p><code>case some(Wrapped)</code></p><p><code>...</code></p><p><code>}</code></p><p>表示一个数据可能有值也可能为空即nil，类型可以用Optional<T>或者T?（常用）表示</p><p>2.如果一个可选类型有值，那么这个值也是被包装起来的，例如optional(“test”)，如果需要取出值就需要解包</p><p>解包方式有 if let 以及！，！表示强解，一般在确定值不为空的时候使用，否则会造成崩溃</p><p><code>if let text = OptionalText {</code></p><p><code>print(text)</code></p><p><code>}</code></p><p><code>let text = OptionalText!</code></p><p>3.在与OC混编过程中，因为OC没有可选类型的概念，需要注意可选类型带来的问题。例如</p><p><code>@objc init(offset: CGFloat? = nil,  text: String? = &quot;&quot;) {</code></p><p><code>super.init(frame: .zero)</code></p><p><code>self.type = type</code></p><p><code>self.offset = offset</code></p><p><code>}</code></p><p>这个方法如果想给OC调用则会报错</p><p><code>Method cannot be marked @objc because the type of the parameter 1 cannot be represented in Objective-C</code></p><p>提示第一个参数无法用OC表示，因为在OC中CGFloat是值类型，不能为nil，而对于OC中的对象类型NSString （String自动转换）则可以接受</p><p>另外，Swift使用OC定义类型时也要注意是否为可选类型</p><p><code>@property (nonatomic, strong) NSNumber *number1;</code></p><p><code>@property (nonatomic, strong, nullable) NSNumber *number2;</code></p><p>带nullable关键字的属性可以被Swift转为可选类型，但是不带nullable的属性则默认被！强解，这里需要注意使用OC网络数据等，如果不做判断可以会导致崩溃</p><h3 id="泛型"><a href="#泛型" class="headerlink" title="泛型"></a>泛型</h3><h3 id="closure"><a href="#closure" class="headerlink" title="closure"></a>closure</h3><h3 id="Enum"><a href="#Enum" class="headerlink" title="Enum"></a>Enum</h3><h3 id="高阶函数Map，reduce等"><a href="#高阶函数Map，reduce等" class="headerlink" title="高阶函数Map，reduce等"></a>高阶函数Map，reduce等</h3><h3 id="POP"><a href="#POP" class="headerlink" title="POP"></a>POP</h3><h2 id="RAC-and-RxSwift"><a href="#RAC-and-RxSwift" class="headerlink" title="RAC and RxSwift"></a>RAC and RxSwift</h2><h1 id="其他问题"><a href="#其他问题" class="headerlink" title="其他问题"></a>其他问题</h1>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>title</title>
    <link href="/2020/03/12/title/"/>
    <url>/2020/03/12/title/</url>
    
    <content type="html"><![CDATA[<h1 id="title"><a href="#title" class="headerlink" title="title"></a>title</h1><pre><code class="swift">let swift = 1</code></pre>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2020/03/10/hello-world/"/>
    <url>/2020/03/10/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre><code class="bash">$ hexo new &quot;My New Post&quot;</code></pre><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre><code class="bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre><code class="bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre><code class="bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
